enum VariantType {
  SIZE
  COLOR
  MATERIAL
  STYLE
  OTHER
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  active      Boolean  @default(true)
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  inventories Inventory[]
  categories  Category[]  @relation("SubCategory")
  category    Category?   @relation("SubCategory", fields: [categoryId], references: [id])
  categoryId  String?
  block       Block       @relation(fields: [blockId], references: [id])
  blockId     String
}

model Inventory {
  id              String   @id @default(cuid())
  name            String
  description     String?
  slug            String   @unique
  sku             String?  @unique
  basePrice       Float
  active          Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  metaTitle       String?
  metaDescription String?
  tags            String[] @default([])
  stock           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  categoryId String?
  category   Category?          @relation(fields: [categoryId], references: [id])
  variants   InventoryVariant[]
  orderItems OrderItem[]

  block   Block  @relation(fields: [blockId], references: [id])
  blockId String
}

model InventoryVariant {
  id          String      @id @default(cuid())
  inventoryId String
  name        String
  value       String
  type        VariantType
  price       Decimal?    @db.Decimal(10, 2)
  stock       Int         @default(0)
  active      Boolean     @default(true)
  position    Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([inventoryId, type, value])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id          String @id @default(cuid())
  orderNumber String @unique // Format: ORD-2024-001

  // Informations client
  customerFirstName String
  customerLastName  String
  customerEmail     String
  customerPhone     String?
  customerAddress   Json // Structure d'adresse Google Maps

  // Informations commande
  subtotal Decimal     @db.Decimal(10, 2)
  tax      Decimal     @default(0) @db.Decimal(10, 2)
  shipping Decimal     @default(0) @db.Decimal(10, 2)
  total    Decimal     @db.Decimal(10, 2)
  status   OrderStatus @default(PENDING)

  // Métadonnées
  notes          String?
  trackingNumber String?
  shippedAt      DateTime?
  deliveredAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  items         OrderItem[]
  statusHistory OrderStatusHistory[]
  block         Block                @relation(fields: [blockId], references: [id])
  blockId       String

  @@index([orderNumber])
  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
  @@index([blockId])
}

model OrderItem {
  id         String  @id @default(cuid())
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  // Snapshot des données produit au moment de la commande
  productName        String
  productDescription String?
  productSku         String?

  // Relations
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([inventoryId])
}

model OrderStatusHistory {
  id String @id @default(cuid())

  // Changement de statut
  previousStatus OrderStatus? // null pour la création initiale
  newStatus      OrderStatus
  changeReason   String? // Raison du changement (optionnel)

  // Métadonnées
  changedAt       DateTime @default(now())
  automaticChange Boolean  @default(false) // Si c'est un changement automatique

  // Relations
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  changer   User   @relation(fields: [changedBy], references: [id])
  changedBy String // ID ou nom de l'utilisateur qui a fait le changement

  @@index([orderId])
  @@index([changedAt])
}
