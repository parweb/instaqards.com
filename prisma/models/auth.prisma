model TwoFactorConfirmation {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId])
}

model Account {
  id String @id @default(cuid())

  providerId        String?
  providerAccountId String
  password          String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([providerId, providerAccountId])
  @@index([userId])
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique
  expires      DateTime
  ipAddress    String?
  userAgent    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model Verification {
  id String @id @default(cuid())

  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Authenticator {
  id String @id @default(cuid())

  credentialID         String  @unique
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, credentialID])
}

model PasswordResetToken {
  id String @id @default(cuid())

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
